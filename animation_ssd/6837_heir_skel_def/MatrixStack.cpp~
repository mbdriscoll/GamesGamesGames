#include "MatrixStack.h"

MatrixStack::MatrixStack()
{
	// Initialize the matrix stack with the identity matrix.
  std::vector< Matrix4f > stack (1, Matrix4f().identity());
  m_matrices = stack;
}

void MatrixStack::clear()
{
	// Revert to just containing the identity matrix.
  std::vector< Matrix4f > ident_stack (1, Matrix4f().identity());
  m_matrices = ident_stack;
  // Q^^ is there a way to encapsulate this so that no repeated code?
}

Matrix4f MatrixStack::top()
{
	// Return the top of the stack
  return m_matrices[m_matrices.size()-1];
}

void MatrixStack::push( const Matrix4f& m )
{
	// Push m onto the stack.
	// Your stack should have OpenGL semantics:
	// the new top should be the old top multiplied by m
  Matrix4f cur_top = m_matrices[m_matrices.size()-1];
  Matrix4f new_top = cur_top*m;
  m_matrices.push_back(new_top);
}

void MatrixStack::pop()
{
	// Remove the top element from the stack
  m_matrices.pop_back(); // no return value, just deletes last element
}

int MatrixStack::size()
{
  return m_matrices.size();
}

